// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen --source=./service.go -destination=./service_mocks_test.go -package=tcp_test
//

// Package tcp_test is a generated GoMock package.
package tcp_test

import (
	context "context"
	reflect "reflect"
	time "time"

	proto "github.com/partyzanex/gowow/pkg/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockWisdomService is a mock of WisdomService interface.
type MockWisdomService struct {
	ctrl     *gomock.Controller
	recorder *MockWisdomServiceMockRecorder
}

// MockWisdomServiceMockRecorder is the mock recorder for MockWisdomService.
type MockWisdomServiceMockRecorder struct {
	mock *MockWisdomService
}

// NewMockWisdomService creates a new mock instance.
func NewMockWisdomService(ctrl *gomock.Controller) *MockWisdomService {
	mock := &MockWisdomService{ctrl: ctrl}
	mock.recorder = &MockWisdomServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWisdomService) EXPECT() *MockWisdomServiceMockRecorder {
	return m.recorder
}

// GenerateChallenge mocks base method.
func (m *MockWisdomService) GenerateChallenge(ctx context.Context) (*proto.Task, *time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge", ctx)
	ret0, _ := ret[0].(*proto.Task)
	ret1, _ := ret[1].(*time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockWisdomServiceMockRecorder) GenerateChallenge(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockWisdomService)(nil).GenerateChallenge), ctx)
}

// GetWisdom mocks base method.
func (m *MockWisdomService) GetWisdom(ctx context.Context, task *proto.Task, solution *proto.Solution) (*proto.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWisdom", ctx, task, solution)
	ret0, _ := ret[0].(*proto.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWisdom indicates an expected call of GetWisdom.
func (mr *MockWisdomServiceMockRecorder) GetWisdom(ctx, task, solution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWisdom", reflect.TypeOf((*MockWisdomService)(nil).GetWisdom), ctx, task, solution)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}
