// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen --source=./service.go -destination=./service_mocks_test.go -package=wisdom_test
//

// Package wisdom_test is a generated GoMock package.
package wisdom_test

import (
	context "context"
	reflect "reflect"

	proto "github.com/partyzanex/gowow/pkg/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockRandomizer is a mock of Randomizer interface.
type MockRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockRandomizerMockRecorder
}

// MockRandomizerMockRecorder is the mock recorder for MockRandomizer.
type MockRandomizerMockRecorder struct {
	mock *MockRandomizer
}

// NewMockRandomizer creates a new mock instance.
func NewMockRandomizer(ctrl *gomock.Controller) *MockRandomizer {
	mock := &MockRandomizer{ctrl: ctrl}
	mock.recorder = &MockRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomizer) EXPECT() *MockRandomizerMockRecorder {
	return m.recorder
}

// GetRandomBytes mocks base method.
func (m *MockRandomizer) GetRandomBytes(n int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomBytes", n)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomBytes indicates an expected call of GetRandomBytes.
func (mr *MockRandomizerMockRecorder) GetRandomBytes(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomBytes", reflect.TypeOf((*MockRandomizer)(nil).GetRandomBytes), n)
}

// MockQuoteService is a mock of QuoteService interface.
type MockQuoteService struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteServiceMockRecorder
}

// MockQuoteServiceMockRecorder is the mock recorder for MockQuoteService.
type MockQuoteServiceMockRecorder struct {
	mock *MockQuoteService
}

// NewMockQuoteService creates a new mock instance.
func NewMockQuoteService(ctrl *gomock.Controller) *MockQuoteService {
	mock := &MockQuoteService{ctrl: ctrl}
	mock.recorder = &MockQuoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteService) EXPECT() *MockQuoteServiceMockRecorder {
	return m.recorder
}

// GetRandomQuote mocks base method.
func (m *MockQuoteService) GetRandomQuote(ctx context.Context) (*proto.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote", ctx)
	ret0, _ := ret[0].(*proto.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuoteServiceMockRecorder) GetRandomQuote(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuoteService)(nil).GetRandomQuote), ctx)
}
