// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen --source=./service.go -destination=./service_mocks_test.go -package=quote_test
//

// Package quote_test is a generated GoMock package.
package quote_test

import (
	context "context"
	reflect "reflect"

	quote "github.com/partyzanex/gowow/internal/quote"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id int) (*quote.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*quote.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// MockRandomizer is a mock of Randomizer interface.
type MockRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockRandomizerMockRecorder
}

// MockRandomizerMockRecorder is the mock recorder for MockRandomizer.
type MockRandomizerMockRecorder struct {
	mock *MockRandomizer
}

// NewMockRandomizer creates a new mock instance.
func NewMockRandomizer(ctrl *gomock.Controller) *MockRandomizer {
	mock := &MockRandomizer{ctrl: ctrl}
	mock.recorder = &MockRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomizer) EXPECT() *MockRandomizerMockRecorder {
	return m.recorder
}

// GetRandomNumber mocks base method.
func (m *MockRandomizer) GetRandomNumber(start, end int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomNumber", start, end)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomNumber indicates an expected call of GetRandomNumber.
func (mr *MockRandomizerMockRecorder) GetRandomNumber(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomNumber", reflect.TypeOf((*MockRandomizer)(nil).GetRandomNumber), start, end)
}
