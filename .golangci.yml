# All available settings of specific linters.
linters-settings:
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: true

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    disable:
      - fieldalignment

      # Settings per analyzer.
    settings:
      # Analyzer name, run `go tool vet help` to see all analyzers.
      printf:
        # Comma-separated list of print function names to check (in addition to default, see `go tool vet help printf`).
        # Default: []
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  exhaustive:
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: true

  exhaustruct:
    include:
      - ^Config$

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    simplify: true

  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 12

  depguard:
    rules:
      main:
        list-mode: lax
        allow:
          - $gostd

  dupl:
    # Tokens count to trigger issue.
    # Default: 150
    threshold: 100

  goconst:
    min-len: 3
    min-occurrences: 3

  ireturn:
    allow:
      - Closure
      - error
      - slog.Handler
      - context.Context
      - generic
      - GenerateIntRes
      - GetRequestByIDRes
      - GetTokensRes

  lll:
    # Max line length, lines longer will be reported.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
    # Default: 120.
    line-length: 121
    # Tab width in spaces.
    # Default: 1
    tab-width: 2

  unparam:
    # Inspect exported functions.
    #
    # Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    #
    # Default: false
    check-exported: false

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 31

  prealloc:
    # IMPORTANT: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # Default: true
    simple: true
    # Report pre-allocation suggestions on range loops.
    # Default: true
    range-loops: false
    # Report pre-allocation suggestions on for loops.
    # Default: false
    for-loops: false

  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    enabled-checks:
      # diagnostic
      - badLock
      - badRegexp
      - builtinShadowDecl
      - emptyDecl
      - evalOrder
      - externalErrorReassign
      - filepathJoin
      - nilValReturn
      - regexpPattern
      - returnAfterHttpError
      - sloppyReassign
      - sortSlice
      - sprintfQuotedString
      - sqlQuery
      - syncMapLoadAndDelete
      - truncateCmp
      - unnecessaryDefer
      - weakCond
      # style
      - boolExprSimplify
      - builtinShadow
      - commentedOutImport
      - deferUnlambda
      - docStub
      - dupImport
      - emptyStringTest
      - hexLiteral
      - httpNoBody
      - importShadow
      - initClause
      - methodExprCall
      - nestingReduce
      - octalLiteral
      - paramTypeCombine
      - preferFilepathJoin
      - redundantSprint
      - regexpSimplify
      - ruleguard
      - stringConcatSimplify
      - timeExprSimplify
      - tooManyResultsChecker
      - typeAssertChain
      - typeDefFirst
      - typeUnparen
      - unlabelStmt
      - unnamedResult
      - unnecessaryBlock
      - yodaStyleExpr
      # performance
      - appendCombine
      - equalFold
      - hugeParam
      - indexAlloc
      - preferDecodeRune
      - preferFprint
      - preferStringWriter
      - preferWriteByte
      - rangeExprCopy
      - rangeValCopy
      - sliceClear
      - stringXbytes

    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    # disabled-checks:
    #   - regexpMust

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # enabled-tags:
    #   - performance

    settings: # settings passed to gocritic
      # captLocal: # must be valid enabled check name
      #   paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32

  tagliatelle:
    # Check the struct tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      # `camel` is used for `json` and `yaml`, and `header` is used for `header` (can be overridden)
      # Default: {}
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `upperSnake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`, `header`
        json: snake
        yaml: camel

  varnamelen:
    min-name-length: 2
    ignore-names: [i, j, k, n, b]

  revive:
    confidence: 0.4

  mnd:
    ignored-files:
      - main.go

linters:
  # Enable all available linters.
  # Default: false
  enable-all: true
  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  disable:
    - godot
    - gci
    - testifylint
    - nlreturn
    - wsl
    - nonamedreturns
    - testpackage
    - paralleltest
    - containedctx
    - tparallel
    # deprecated
    - err113

issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: https://golangci-lint.run/usage/false-positives/#default-exclusions
  exclude:
    - Function 'Run' has too many statements
    - Function 'Run' is too long
    - cyclomatic complexity [0-9]+ of func `Run` is high
    - exported (method|function|type|const|var) (.+) should have comment
    - comment on exported (method|function|type|const|var) (.+) should be of the form

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - linters:
        - funlen
        - wsl
        - wrapcheck
      source: "^func Test"
    - linters:
        - wrapcheck
      source: "ctx.Err()"
    - linters:
        - lll
      source: "^//go:generate "
    - path: _test\.go
      linters:
        - goerr113
        - dupl
        - wrapcheck
        - govet
        - bodyclose
        - revive
        - gocritic
        - usestdlibvars
        - noctx
        - errcheck
        - goconst

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true
  exclude-use-default: true

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Which dirs to exclude: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path,
  # including the path prefix if one is set.
  # Default dirs are skipped independently of this option's value (see exclude-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # Default: []
  exclude-dirs:
    - internal/api/v1

# Options for analysis running.
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 10m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  build-tags:
    - integration

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  go: '1.23'